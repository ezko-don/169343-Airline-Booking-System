Airline Booking System
Overview
The Airline Booking System is a Django-based web application designed to manage flight bookings and passenger information. This project provides a RESTful API for managing flights and passengers, allowing users to create, read, update, and delete records efficiently.

Features
Manage flights with details such as flight number, departure, arrival, origin, destination, and capacity.
Manage passengers with personal information and their associated flights.
RESTful API endpoints for easy integration and access.
Pagination support for API responses.
Technologies Used
Django 5.1.3
Django REST Framework
SQLite (for development)
Python 3.x
Installation
Follow these steps to set up the project on your local machine:

Prerequisites
Python 3.x installed on your machine.
pip (Python package installer) installed.
Step 1: Clone the Repository
Clone the project repository from GitHub (or your source control):

bash
Insert Code
Run
Copy code
git clone <repository-url>
cd airline_booking_system
Step 2: Create a Virtual Environment
It is recommended to create a virtual environment to manage dependencies:

bash
Insert Code
Run
Copy code
python -m venv venv
Activate the virtual environment:

On Windows:
bash
Insert Code
Run
Copy code
venv\Scripts\activate
On macOS/Linux:
bash
Insert Code
Run
Copy code
source venv/bin/activate
Step 3: Install Dependencies
Install the required packages using pip:

bash
Insert Code
Run
Copy code
pip install django djangorestframework django-filter
Step 4: Set Up the Database
Run the following command to create the database and apply migrations:

bash
Insert Code
Run
Copy code
python manage.py migrate
Step 5: Create a Superuser (Optional)
To access the Django admin interface, create a superuser:

bash
Insert Code
Run
Copy code
python manage.py createsuperuser
Follow the prompts to set up your superuser account.

Step 6: Run the Development Server
Start the development server:

bash
Insert Code
Run
Copy code
python manage.py runserver
The application will be accessible at http://127.0.0.1:8000/.

API Endpoints
Flights
List Flights: GET /api/flights/
Create Flight: POST /api/flights/
Retrieve Flight: GET /api/flights/{id}/
Update Flight: PUT /api/flights/{id}/
Delete Flight: DELETE /api/flights/{id}/
Passengers
List Passengers: GET /api/passengers/
Create Passenger: POST /api/passengers/
Retrieve Passenger: GET /api/passengers/{id}/
Update Passenger: PUT /api/passengers/{id}/
Delete Passenger: DELETE /api/passengers/{id}/
Filtering Passengers
You can filter passengers by flight ID using the query parameter:

Insert Code
Run
Copy code
GET /api/passengers/?flight=<flight_id>
Running Tests
To run tests for the application, use the following command:

bash
Insert Code
Run
Copy code
python manage.py test
Contributing
Contributions are welcome! If you have suggestions or improvements, feel free to create a pull request or open an issue.

License
This project is licensed under the MIT License. See the LICENSE file for more details.

Acknowledgments
Django and Django REST Framework for providing the framework and tools to build this application.
All contributors who have helped in the development of this project.
Feel free to modify this README to better fit your project's specifics or to add any additional information that may be relevant!


